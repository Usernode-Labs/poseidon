#!/usr/bin/env python3
"""
Run and compare Poseidon benches:

- Our Poseidon v1 (simple_hash)
- Our Poseidon2 (simple_hash_poseidon2)
- O(1) Labs kimchi Poseidon (benches/o1labs)

Produces a Markdown (bench-comparison.md) report with median times.

Usage:
  python3 scripts/compare_benches.py
"""

import subprocess
import re
import shutil
from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent


def run(cmd, cwd=None):
    print(f"\n$ {' '.join(cmd)}")
    p = subprocess.run(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    print(p.stdout)
    return p.stdout


time_re = re.compile(
    r"^\s*time:\s*\[\s*"
    r"(?P<min>[0-9.]+)\s*(?P<unit>\S+)\s+"
    r"(?P<med>[0-9.]+)\s*\S+\s+"
    r"(?P<max>[0-9.]+)\s*\S+\s*\]",
    re.MULTILINE,
)


def parse_times(output):
    """Return list of (bench_id, median_value, unit). Criterion prints the bench name
    on the previous non-empty line before the time line; try to capture both."""
    results = []
    lines = output.splitlines()
    for i, line in enumerate(lines):
        m = time_re.search(line)
        if not m:
            continue
        # Bench id is typically on the previous non-empty line
        j = i - 1
        while j >= 0 and lines[j].strip() == "":
            j -= 1
        bench_id = lines[j].strip() if j >= 0 else "(unknown)"
        unit = m.group("unit")
        median_val = float(m.group("med"))
        results.append((bench_id, median_val, unit))
    return results


def filter_benches(results, prefixes):
    out = {}
    for bench_id, median, unit in results:
        for name, prefix in prefixes.items():
            if bench_id.startswith(prefix):
                out[bench_id] = (name, median, unit)
    return out


def to_micros(val, unit):
    u = unit.lower()
    if u in ("us", "µs"):
        return val
    if u == "ns":
        return val / 1000.0
    if u == "ms":
        return val * 1000.0
    if u == "s":
        return val * 1_000_000.0
    # Fallback: leave as-is
    return val


def main():
    # 1) Our benches
    out_v1 = run(["cargo", "bench", "-q", "--bench", "simple_hash"])
    out_v2 = run(["cargo", "bench", "-q", "--bench", "simple_hash_poseidon2"]) 

    # 2) O(1) Labs benches (separate crate)
    o1_path = ROOT / "benches" / "o1labs"
    if not (o1_path / "Cargo.toml").exists():
        print("Warning: O(1) Labs bench crate not found at benches/o1labs; skipping kimchi benches.")
        out_o1 = ""
    else:
        out_o1 = run(["cargo", "bench", "-q", "--manifest-path", str(o1_path / "Cargo.toml")])

    # Parse
    r1 = parse_times(out_v1)
    r2 = parse_times(out_v2)
    r3 = parse_times(out_o1)

    # Select minimal and stream sets for easy comparison
    prefixes = {
        # Minimal single-block comparisons
        "poseidon1_min": "simple_hash_minimal/pallas_absorb2_digest",
        "poseidon2_min": "simple_hash_minimal_poseidon2/pallas2_absorb3_digest",
        "o1labs_min": "o1labs_poseidon_minimal/absorb2_digest",
        # Stream comparisons (N elements)
        "poseidon1_stream": "simple_hash_stream/pallas_update_digest/",
        "poseidon2_stream": "simple_hash_stream_poseidon2/pallas2_update_digest/",
        "o1labs_stream": "o1labs_poseidon_stream/update_digest/",
    }

    map1 = filter_benches(r1, prefixes)
    map2 = filter_benches(r2, prefixes)
    map3 = filter_benches(r3, prefixes)

    # Combine and normalize to microseconds for nicer comparison
    combined = {**map1, **map2, **map3}

    # Build markdown
    md = []
    md.append("# Poseidon Benchmarks Comparison\n")
    md.append("Generated by `scripts/compare_benches.py`. All times are median (µs).\n")

    # Minimal table
    md.append("\n## Minimal (single block)\n")
    md.append("| Implementation | Median (µs) |\n|---|---:|")
    rows_min = []
    labels_min = [
        ("Poseidon v1 (t=3, absorb 2)", prefixes["poseidon1_min"]),
        ("Poseidon2 (t=4, absorb 3)", prefixes["poseidon2_min"]),
        ("O(1) Labs kimchi (t=3, absorb 2)", prefixes["o1labs_min"]),
    ]
    for label, prefix in labels_min:
        # find first matching entry
        best = None
        for bench_id, (name, median, unit) in combined.items():
            if bench_id.startswith(prefix):
                best = (median, unit)
                break
        if best:
            val_us = to_micros(best[0], best[1])
            md.append(f"| {label} | {val_us:.3f} |")
        else:
            md.append(f"| {label} | n/a |")

    # Stream table
    md.append("\n\n## Stream (absorb N, then digest)\n")
    sizes = [128, 1024, 4096, 16384]
    md.append("| N | Poseidon v1 (µs) | Poseidon2 (µs) | O(1) Labs (µs) |\n|---:|---:|---:|---:|")
    for n in sizes:
        def find(prefix):
            key = f"{prefix}{n}"
            # exact match bench id starts with that key
            for bench_id, (name, median, unit) in combined.items():
                if bench_id.startswith(key):
                    return to_micros(median, unit)
            return None
        v1 = find(prefixes["poseidon1_stream"]) 
        v2 = find(prefixes["poseidon2_stream"]) 
        o1 = find(prefixes["o1labs_stream"]) 
        md.append(
            f"| {n} | {v1:.3f} | {v2:.3f} | {o1:.3f} |".replace("None", "n/a")
        )

    # Write report
    report = ROOT / "bench-comparison.md"
    report.write_text("\n".join(md))
    print(f"\nWrote report: {report}")


if __name__ == "__main__":
    main()
